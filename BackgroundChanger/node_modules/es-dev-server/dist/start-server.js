"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startServer = startServer;

var _opn = _interopRequireDefault(require("opn"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _createServer = require("./create-server.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @param {import('./config.js').InternalConfig} cfg */
function startServer(cfg) {
  let fileWatcher = cfg.watch ? _chokidar.default.watch([]) : undefined;
  const result = (0, _createServer.createServer)(cfg, fileWatcher);
  const {
    app
  } = result;
  let {
    server
  } = result; // start the server, open the browser and log messages

  server.listen({
    port: cfg.port,
    host: cfg.hostname
  }, () => {
    const prettyHost = cfg.hostname === '127.0.0.1' ? 'localhost' : cfg.hostname;

    if (cfg.logStartup) {
      const msgs = [];
      msgs.push(`es-dev-server started on http${cfg.http2 ? 's' : ''}://${prettyHost}:${cfg.port}`);
      msgs.push(`  Serving files from '${cfg.rootDir}'.`);

      if (cfg.openBrowser) {
        msgs.push(`  Opening browser on '${cfg.openPath}'`);
      }

      if (cfg.appIndex) {
        msgs.push(`  Using history API fallback, redirecting non-file requests to '${cfg.appIndex}'`);
      }
      /* eslint-disable-next-line no-console */


      console.log(msgs.join('\n'));
    }

    if (cfg.openBrowser) {
      (0, _opn.default)(`http${cfg.http2 ? 's' : ''}://${prettyHost}:${cfg.port}${cfg.openPath}`);
    }
  }); // cleanup after quit

  server.addListener('close', () => {
    if (fileWatcher) {
      fileWatcher.close();
      fileWatcher = undefined;
    }
  });
  ['exit', 'SIGINT', 'uncaughtException'].forEach(event => {
    // @ts-ignore
    process.on(event, () => {
      if (server) {
        server.close();
        server = undefined;
      }
    });
  });
  return {
    server,
    app
  };
}