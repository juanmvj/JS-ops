"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMiddlewares = createMiddlewares;

var _koaStatic = _interopRequireDefault(require("koa-static"));

var _koaEtag = _interopRequireDefault(require("koa-etag"));

var _basePath = require("./middleware/base-path.js");

var _historyApiFallback = require("./middleware/history-api-fallback.js");

var _babel = require("./middleware/babel.js");

var _reloadBrowser = require("./middleware/reload-browser.js");

var _transformIndexHtml = require("./middleware/transform-index-html.js");

var _messageChannel = require("./middleware/message-channel.js");

var _cache = require("./middleware/cache.js");

var _constants = require("./constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates middlewares based on the given configuration. The middlewares can be
 * used by a koa server using `app.use()`:
 *
 * @param {import('./config').InternalConfig} config the server configuration
 * @param {import('chokidar').FSWatcher} [fileWatcher] an optional chokidar file watcher instance
 *   this must be passed if watch is true
 * @returns {import('koa').Middleware[]}
 */
function createMiddlewares(config, fileWatcher) {
  const {
    rootDir,
    appIndex,
    appIndexDir,
    basePath,
    moduleDirectories,
    nodeResolve,
    readUserBabelConfig,
    customBabelConfig,
    watch,
    extraFileExtensions,
    compatibilityMode,
    babelExclude,
    babelModernExclude,
    watchExcludes,
    watchDebounce,
    customMiddlewares,
    logBabelErrors
  } = config;
  /** @type {import('koa').Middleware[]} */

  const middlewares = [];

  if (!Object.values(_constants.compatibilityModes).includes(compatibilityMode)) {
    throw new Error(`Unknown compatibility mode: ${compatibilityMode}. Must be one of: ${Object.values(_constants.compatibilityModes)}`);
  }

  if (watch && !fileWatcher) {
    throw new Error('Must provide a fileWatcher if watch is true.');
  }

  const setupBabel = customBabelConfig || nodeResolve || [_constants.compatibilityModes.ALL, _constants.compatibilityModes.MODERN].includes(compatibilityMode) || readUserBabelConfig;
  const setupCompatibility = compatibilityMode && compatibilityMode !== _constants.compatibilityModes.NONE;
  const setupTransformIndexHTML = setupBabel || setupCompatibility;
  const setupHistoryFallback = appIndex;
  const setupMessageChanel = watch || setupBabel; // strip application base path from requests

  if (config.basePath) {
    middlewares.push((0, _basePath.createBasePathMiddleware)({
      basePath
    }));
  } // add custom user's middlewares


  if (customMiddlewares && customMiddlewares.length > 0) {
    customMiddlewares.forEach(customMiddleware => {
      middlewares.push(customMiddleware);
    });
  } // serves 304 responses if resource hasn't changed


  middlewares.push((0, _cache.createCacheMiddleware)()); // adds etag headers for caching

  middlewares.push((0, _koaEtag.default)()); // communicate with browser for reload or logging

  if (setupMessageChanel) {
    middlewares.push((0, _messageChannel.createMessageChannelMiddleware)({
      rootDir,
      appIndex
    }));
  } // watch files and reload browser


  if (watch) {
    middlewares.push((0, _reloadBrowser.createReloadBrowserMiddleware)({
      rootDir,
      fileWatcher,
      watchExcludes,
      watchDebounce
    }));
  } // run code through babel for compatibility with older browsers


  if (setupBabel) {
    middlewares.push((0, _babel.createBabelMiddleware)({
      rootDir,
      moduleDirectories,
      nodeResolve,
      readUserBabelConfig,
      compatibilityMode,
      extraFileExtensions,
      customBabelConfig,
      babelExclude,
      babelModernExclude,
      logBabelErrors
    }));
  } // inject polyfills and shims for compatibility with older browsers


  if (setupTransformIndexHTML) {
    middlewares.push((0, _transformIndexHtml.createTransformIndexHTMLMiddleware)({
      compatibilityMode,
      appIndex,
      appIndexDir
    }));
  } // serve index.html for non-file requests for SPA routing


  if (setupHistoryFallback) {
    middlewares.push((0, _historyApiFallback.createHistoryAPIFallbackMiddleware)({
      appIndex,
      appIndexDir
    }));
  } // serve ststic files


  middlewares.push((0, _koaStatic.default)(rootDir, {
    setHeaders(res) {
      res.setHeader('cache-control', 'no-cache');
    }

  }));
  return middlewares;
}